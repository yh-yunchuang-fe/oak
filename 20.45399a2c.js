(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{"./src/Input/README.md":function(n,e,a){"use strict";a.r(e),e.default='# Input 输入框\n\n## 使用\n\n在页面 `json` 中引入组件：\n\n```json\n// import in `page.json`:\n"usingComponents": {\n  "oak-input": "path/to/your/oakui/Input/input"\n}\n```\n\n在页面使用\n```html\n\x3c!-- use in `page.wxml` --\x3e\n<oak-input name=\'username\' type=\'text\' />\n```\n\n## 代码演示\n### 默认样式\n```html\n<oak-input \n    name="default"\n    type="text"\n    label="默认样式："\n    placeholder="输入内容"\n></oak-input>\n```\n\n### 禁用输入\n```html\n<oak-input \n    name="default"\n    type="text"\n    label="默认样式："\n    placeholder="禁用输入"\n    disabled\n></oak-input>\n```\n\n### 基本用法\n```html\n<oak-input \n    name="username"\n    type="text"\n    label="用户名："\n    placeholder="输入用户名"\n    icon="manage"\n    icon-color="#1989fa"\n    border\n    require\n></oak-input>\n<oak-input \n    name="password"\n    type="password"\n    label="密码："\n    placeholder="输入密码"\n    icon="Privacy"\n    icon-color="#1989fa"\n    bind:focus="focus"\n    bind:change="change"\n    bind:blur="blur"\n    bind:confirm="confirm"\n    bind:keyboardheightchange="keyboardheightchange"\n    require\n>\n</oak-input>\n```\n\n### 可清除内容\n```html\n<oak-input \n    name="username"\n    type="number"\n    label="手机号："\n    placeholder="输入手机号"\n    icon="brush"\n    icon-color="#1989fa"\n    clearable\n></oak-input>\n```\n\n### 自定义按钮\n```html\n<oak-input \n    name="code"\n    type="number"\n    label="验证码："\n    placeholder="输入4位验证码"\n    icon="save"\n    icon-color="#1989fa"\n    maxlength="{{4}}"\n    clearable\n>\n    <oak-button \n        slot="button"\n        plain\n        button-class="send-btn"\n        bindtap="sendCode"\n        disabled="{{disabled}}"\n    >{{sendText}}</oak-button>\n</oak-input>\n```\n\n### 自动换行\n```html\n<oak-input \n    name="username"\n    type="textarea"\n    label="评论："\n    placeholder="输入评论"\n    icon="select"\n    icon-color="#1989fa"\n    border\n    autosize\n    clearable\n>\n</oak-input>\n```\n\n### 错误提示\n```html\n<oak-input \n    name="default"\n    value="{{\'示例：\'+ errorMessage}}"\n    type="text"\n    label="错误提示："\n    placeholder="输入内容"\n    error="{{error}}"\n    error-message="{{errorMessage}}"\n    clearable\n></oak-input>\n```\n\n## APIS\n\n| 属性 | 说明 | 类型 | 默认值 |\n|-----------|-----------|-----------|-------------|\n| name | 名称，配合表单作为 `key` 使用 | `string` | - |\n| label | 输入框关联文字 | `string` | - |\n| value | 内容 | `string` | - |\n| type | 类型  | `string` | `text` |\n| icon | 图标 | `string` | `oak-icon` |\n| icon-color | 图标颜色 | `string` | `#999` |\n| icon-size | 图标尺寸 | `string` | `32rpx` |\n| button | 右侧按钮 |  `string` | - |\n| border | 边框 | `boolean` | `false` |\n| placeholder | placeholder | `string` | - |\n| disabled | 禁用输入 | `boolean` | `false` |\n| autosize | 配合 textarea 高度自适应 | `boolean` | `false` |\n| fixed | 配合 textarea 使用，如果在一个 position:fixed 的区域，需要显示指定属性 fixed 为 true | `boolean` | `false` |\n| placeholder-style | placeholder 的样式 | `string` | - |\n| placeholder-class | placeholder 的样式类 | `string` | - |\n| focus | 是否焦点 | `boolean` | `false` |\n| confirm-type | 右下角按钮文字，仅在 type=\'text\' 时生效 | `string` | - |\n| confirm-hold | 点击键盘右下角按钮时是否保持键盘不收起 | `boolean` | `false` |\n| cursor | 指定focus时的光标位置 | `Number` | - |\n| selection-start | 光标起始位置，自动聚集时有效，需与 selection-end 搭配使用 | `Number` | `-1` |\n| selection-end | 光标结束位置，自动聚集时有效，需与 selection-start 搭配使用 | `Number` | `-1` |\n| adjust-position | 键盘弹起时，是否自动上推页面 | `boolean` | `true` |\n| hold-keyboard | focus时，点击页面的时候不收起键盘 | `boolean` | `false` |\n| maxlength | 最大输入长度，设置为 -1 的时候不限制最大长度 | `Number` | `140` |\n| cursor-spacing | 指定光标与键盘的距离，取 input 距离底部的距离和 cursor-spacing 指定的距离的最小值作为光标与键盘的距离 | `Number` | `0` |\n| clearable | 是否可清空 | `boolean` | `false` |\n| clear-icon-color | 清空图标颜色 | `string` | `false` |\n| error | 显示错误 | `boolean` | `false` |\n| error-message | 显示错误信息 | `string` | - |\n| bindchange | 键盘输入时触发  | `event` | - |\n| bindfocus | 获取焦点  | `event` | - |\n| bindblur | 失去焦点  | `event` | - |\n| bindconfirm | 点击完成按钮时触发，event.detail = {value: value}  | `event` | - |\n| bindkeyboardheightchange | 键盘高度发生变化的时候触发此事件，event.detail = {height: height, duration: duration} | `event` | - |\n\n## type 的合法值\n\n| 值 | 说明 |\n|-----------|-----------|\n| text | 文本输入键盘 |\n| textarea | 可以通过 autosize 属性设置高度自适应 |\n| password | 密码类型 |\n| number | 数字输入键盘\t|\n| idcard | 身份证输入键盘\t|\n| digit | 带小数点的数字键盘 |\n\n## confirm-type 的合法值\n\n| 值 | 说明 |\n|-----------|-----------|\n| send | 右下角按钮为“发送”\t |\n| search | 右下角按钮为“搜索” |\n| next | 右下角按钮为“下一个” |\n| go | 右下角按钮为“前往”\t|\n| done | 右下角按钮为“完成”\t|\n\n## Input Slot\n| slot | 说明 |\n|-----------|-----------|\n| button | 自定义 button 显示内容 |\n\n## 外部样式类\n\n| 类名 | 说明 |\n|-----------|-----------|\n| ext-class | 作用于根节点 |\n| input-class  | 作用于原生输入框 |\n'}}]);